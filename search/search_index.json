{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Proyecto de programaci\u00f3n","text":"<p>Este es el proyecto de:</p> <ul> <li>Fulanito de Tal, B74653</li> <li>Mengano de Tal, B083472</li> </ul> <p>Esta es la documentaci\u00f3n del proyecto de programaci\u00f3n de IE0405 - Modelos Probabil\u00edsticos de Se\u00f1ales y Sistemas.</p>"},{"location":"#objetivo-general","title":"Objetivo general","text":"<p>Implementar una canalizaci\u00f3n (pipeline) en tiempo real para procesamiento y an\u00e1lisis de datos a partir de una fuente de datos externa, utilizando las herramientas computacionales de Python.</p>"},{"location":"#objetivos-especificos","title":"Objetivos espec\u00edficos","text":"<ol> <li>Explorar fuentes de datos en tiempo real para su recopilaci\u00f3n y an\u00e1lisis.</li> <li>Utilizar interfaces de programaci\u00f3n de aplicaciones (API) de forma program\u00e1tica para obtener datos de fuentes externas.</li> <li>Utilizar administradores de tareas (Celery Worker) y planificadores de tareas (Celery Beat) para ejecutar tareas peri\u00f3dicas.</li> <li>Utilizar un manejador de bases de datos (SQLite3, PostgreSQL) y un mapeador de objetos relacional (SQLAlchemy) para interactuar con bases de datos.</li> <li>Procesar los datos obtenidos para tratamiento y an\u00e1lisis.</li> <li>Utilizar herramientas estad\u00edsticas de Python para hacer an\u00e1lisis estad\u00edstico descriptivo y modelado probabil\u00edstico de los datos recopilados.</li> <li>Graficar los datos recopilados y sus an\u00e1lisis para visualizaci\u00f3n y an\u00e1lisis preliminar.</li> <li>Crear documentaci\u00f3n del proyecto en forma de p\u00e1gina web para presentaci\u00f3n al p\u00fablico en general.</li> </ol>"},{"location":"#sobre-la-documentacion","title":"Sobre la documentaci\u00f3n","text":"<p>Esta documentaci\u00f3n est\u00e1 creada con Material for MkDocs, una plataforma ampl\u00edsima con m\u00faltiples opciones de formato.</p> <p>En el archivo <code>mkdocs.yml</code> est\u00e1 la configuraci\u00f3n b\u00e1sica de esta documentaci\u00f3n, la cual debe ser modificada (especialmente la navegaci\u00f3n) para incluir las secciones de la documentaci\u00f3n del proyecto y sus resultados.</p> <p>En la carpeta <code>img/</code> pueden colocar im\u00e1genes como gr\u00e1ficas y similares.</p> <p>Pueden agregar la estructura de archivos y carpetas que sea necesaria.</p>"},{"location":"instrucciones/","title":"Enunciado del proyecto","text":""},{"location":"instrucciones/#instrucciones","title":"Instrucciones","text":""},{"location":"instrucciones/#configuracion","title":"Configuraci\u00f3n","text":"<p>Siguiendo las instrucciones de esta documentaci\u00f3n y el archivo <code>README.md</code> instalar y ejecutar localmente el proyecto. Tambi\u00e9n, habilitar el control de versiones con Git y GitHub para todo el equipo en los repositorios de MPSS-EIE.</p>"},{"location":"instrucciones/#seleccion-de-datos","title":"Selecci\u00f3n de datos","text":"<p>Grupalmente, hacer una b\u00fasqueda de las opciones disponibles de bases de datos en tiempo real para analizar en el proyecto.</p> <p>Los datos deben ser actualizados en tiempo real. Ejemplos t\u00edpicos incluyen datos meteorol\u00f3gicos, de finanzas, de monitoreo de emergencias, datos de sensores ambientales o de cualquier otro tipo.</p> <p>Los datos deben ser, idealmente, gratis. Sin embargo, algunos API p\u00fablicos y gratuitos necesitan de un token o ficha de autenticaci\u00f3n que sirve de \"llave\" para acceder a los datos. Este es un dato privado y debe ser guardado con seguridad. Un token puede verse algo como <code>ab34cd56ef789012g345h678i901j234</code>. Usualmente basta con registrarse al proveedor del API para recibir el token.</p>"},{"location":"instrucciones/#reunion-de-discusion-con-profesor","title":"Reuni\u00f3n de discusi\u00f3n con profesor","text":"<p>En fecha y hora indicadas por el profesor de cada grupo, cada equipo de trabajo se reunir\u00e1 para discutir:</p> <ul> <li>Selecci\u00f3n de datos</li> <li>Pregunta de investigaci\u00f3n</li> </ul> <p>\u00bfQu\u00e9 hay que llevar?</p> <p>Es necesario traer a la reuni\u00f3n una o varias propuestas de datos y una exploraci\u00f3n preliminar del tipo de datos, su actualizaci\u00f3n, si son accesibles libremente o con token, posibles an\u00e1lisis que ser\u00edan interesantes, algo de investigaci\u00f3n sobre el \u00e1rea af\u00edn a los datos.</p>"},{"location":"instrucciones/#presentacion-de-avance","title":"Presentaci\u00f3n de avance","text":"<p>Valor: 5%</p> <p>En la documentaci\u00f3n web deben presentar:</p> <ol> <li>Presentaci\u00f3n de los datos (1%)<ul> <li>Detalle del contexto de los datos (sean datos ambientales, de finanzas, etc.)</li> <li>Descripci\u00f3n detallada del significado de cada dato, sus unidades, y cualquier otra informaci\u00f3n relevante</li> </ul> </li> <li>Modelos de los datos (<code>models.py</code>) (1%)</li> <li>Recolecci\u00f3n preliminar de datos (al menos 12 horas continuas) en la base de datos (1%)</li> <li>Estad\u00edstica descriptiva de los datos<ul> <li>Gr\u00e1ficas descriptivas (1%)</li> <li>Modelos de probabilidad para los datos donde aplica (1%)</li> </ul> </li> </ol>"},{"location":"instrucciones/#presentacion-del-reporte-final","title":"Presentaci\u00f3n del reporte final","text":"<p>Valor: 15%</p> <p>En formato por definir, cada equipo presenta:</p> <ol> <li>Documentaci\u00f3n completa (5%)<ul> <li>Todo lo del avance, mejorado si es el caso</li> <li>Especificaci\u00f3n de la pregunta de investigaci\u00f3n</li> </ul> </li> <li>Respuesta a la pregunta de investigaci\u00f3n (5%)<ul> <li>Modelado de los datos obtenidos</li> <li>Resultados estad\u00edsticos (correlaciones, etc.)</li> </ul> </li> <li>An\u00e1lisis y conclusiones (5%)</li> </ol>"},{"location":"instrucciones/#agenda","title":"Agenda","text":"<ul> <li>Lunes 20 de mayo de 2024: presentaci\u00f3n del proyecto y configuraci\u00f3n inicial</li> <li>Lunes 27 de mayo de 2024: demostraci\u00f3n de ejemplo de procesamiento y an\u00e1lisis de datos</li> <li>Semana del 3 de junio de 2024: reuniones con profesores</li> <li>Semana del 17 de junio de 2024: entrega del avance</li> <li>Semana del 8 de julio de 2024: entrega del reporte final</li> </ul>"},{"location":"modelos/","title":"Modelos de probabilidad de los datos","text":"<p>Una parte central del proyecto es modelar estad\u00edsticamente los datos con distribuciones de probabilidad.</p> <p>En el <code>PyX</code> n\u00famero 5 hay una discusi\u00f3n sobre modelado de datos con SciPy y Fitter.</p>"},{"location":"procesamiento/","title":"Procesamiento de datos","text":""},{"location":"procesamiento/#procesamiento-y-analisis-descriptivo-con-pandas","title":"Procesamiento y an\u00e1lisis descriptivo con Pandas","text":"<p>En el <code>PyX</code> n\u00famero 2 hay una amplia discusi\u00f3n sobre Pandas.</p> <p>Por el momento, basta con decir que Pandas es el equivalente program\u00e1tico de Microsoft Office Excel y otros programas de ofim\u00e1tica de hojas de c\u00e1lculo, como Google Spreadsheets y LibreOffice Calc.</p> <p>Esto en el sentido de que Pandas manipula datos tabulares (filas y columnas, y en ese sentido planos) por medio del objeto <code>DataFrame</code>, que ser\u00eda equivalente a una pesta\u00f1a u hoja de Excel.</p> <p>Sobre los datos en este <code>DataFrame</code> es posible hacer todo tipo de operaciones y aplicar todo tipo de funciones, al igual que en Excel. Quiz\u00e1 las ventajas de Pandas son la posibilidad de trabajar con grandes cantidades de datos (limitados solamente por la memoria de la computadora) con mayor rendimiento y eficiencia. Excel tiene limitaciones de filas (1.048.576) y columnas (16.384, XFD) y su desempe\u00f1o se deteriora considerablemente al aproximarse a estos l\u00edmites. Tambi\u00e9n Pandas permite la integraci\u00f3n total con los m\u00faltiples paquetes de Python para crear flujos automatizados de procesamiento de datos, incluyendo aprendizaje autom\u00e1tico e interfaces de entrada y salida (sensores, actuadores, etc.).</p> <p>Adem\u00e1s, por supuesto, Pandas es de c\u00f3digo abierto y gratis.</p>"},{"location":"procesamiento/#visualizacion-de-datos-con-matplotlib","title":"Visualizaci\u00f3n de datos con Matplotlib","text":"<p>En el <code>PyX</code> n\u00famero 3 hay una discusi\u00f3n sobre los conceptos b\u00e1sicos de graficaci\u00f3n con Matplotlib.</p>"},{"location":"recopilacion/","title":"Recopilaci\u00f3n y almacenamiento de datos","text":"<p>El an\u00e1lisis de datos comienza con la recopilaci\u00f3n de datos. Podr\u00edamos separar la recopilaci\u00f3n en dos grandes paradigmas:</p> <ul> <li>Procesamiento por lotes (batch processing): consiste en la recolecci\u00f3n de una gran cantidad de datos hist\u00f3ricos, t\u00edpicamente una sola vez, o con una frecuencia tan baja que cada recopilaci\u00f3n tiene una gran cantidad de datos. Ejemplos: los \"famosos\" datos de pasajeros del Titanic (necesariamente recolectados una sola vez) o la informaci\u00f3n que utiliza YouTube o Netflix para entrenar sus sistemas de recomendaciones, que son actualizados aproximadamente cada 24 horas pero que contienen millones de interacciones.</li> <li>Procesamiento en tiempo real (real-time processing): consiste en la recolecci\u00f3n de datos al momento de su ocurrencia, esto es, basado en eventos (event-driven) o con una frecuencia de recopilaci\u00f3n tan alta que solamente algunos pocos nuevos datos, o ninguno, son obtenidos en cada muestreo. Ejemplos: datos sobre terremotos, mercados de valores o de redes de sensores recopilados cada 10 segundos.</li> </ul> <p>En medio de ambos hay una \"zona gris\" a menudo llamada procesamiento en tiempo casi real (quasi real-time processing) que captura la din\u00e1mica del sistema sin responder directamente a eventos o a una alt\u00edsima frecuencia. Ejemplos: telemetr\u00eda y rastreo en veh\u00edculos de transporte p\u00fablico, que actualizan datos cada 15 o 20 segundos, lo suficiente para tener una buena estimaci\u00f3n de la posici\u00f3n, pero no totalmente \"en tiempo real\".</p> <p>La definici\u00f3n var\u00eda seg\u00fan el fen\u00f3meno analizado, que puede tener cambios muy frecuentes o no.</p> <p>Definici\u00f3n informal de procesamiento en tiempo real</p> <p>Un flujo de datos en el cual el procesamiento de una nueva muestra es iniciado en el momento de su llegada y concluye antes de la llegada de la siguiente muestra o evento.</p>"},{"location":"recopilacion/#y-de-donde-vienen-estos-datos","title":"\u00bfY de d\u00f3nde vienen estos datos?","text":"<p>A veces de un solo archivo (ejemplo, un <code>.xlsx</code> o <code>.csv</code>), a veces directamente de un sensor (ejemplo, un Arduino con un sensor de temperatura conectado a nuestra computadora), a veces de una base de datos externa, siguiendo varios modelos de comunicaci\u00f3n posibles.</p>"},{"location":"recopilacion/#modelos-de-comunicacion","title":"Modelos de comunicaci\u00f3n","text":"<p>Algunos de los modelos de comunicaci\u00f3n para compartir datos entre sistemas son:</p> <ul> <li>Solicitud/respuesta: donde una solicitud del cliente interact\u00faa con los recursos del servidor que devuelve una respuesta. Ejemplo: HTTP (404 Not Found) y los web API (sobre HTTP) que conectan distintos servicios. </li> <li>Publicaci\u00f3n/suscripci\u00f3n: donde un productor publica un mensaje que coloca en un canal sobre un t\u00f3pico y un intermediador de mensajes lo distribuye a todos los procesos que est\u00e9n suscritos. Ejemplo: el monitoreo de eventos en la agricultura de precisi\u00f3n en una red de sensores conectada con MQTT. </li> <li>WebSockets: donde hay un canal permanente de comunicaci\u00f3n bidireccional. Ejemplo: cualquier aplicaci\u00f3n de chat (WhatsApp, Telegram, etc.) o videojuegos en l\u00ednea.</li> <li>Otros</li> </ul> <p>Una de las soluciones m\u00e1s populares es, precisamente, obtener datos de fuentes externas, y hacerlo por medio de una interfaz de programaci\u00f3n de aplicaciones (API).</p>"},{"location":"recopilacion/#donde-son-almacenados-los-datos","title":"\u00bfD\u00f3nde son almacenados los datos?","text":"<p>Luego, el an\u00e1lisis de datos t\u00edpicamente contin\u00faa con el almacenamiento de datos despu\u00e9s de la recopilaci\u00f3n. Las bases de datos ofrecen almacenamiento permanente y son la soluci\u00f3n necesaria en el caso de grandes cantidades de datos.</p> <p>Nota: no siempre es necesario almacenar los datos de esta forma. A menudo es suficiente hacer el an\u00e1lisis de los datos y luego descartarlos.</p> <p>Hay distintos tipos de bases de datos, donde las bases de datos relacionales son las m\u00e1s comunes.</p>"},{"location":"recopilacion/#bases-de-datos-relacionales","title":"Bases de datos relacionales","text":"<p>Son datos tabulares -y por tanto \"planos\" y \"no anidados\"- en tablas con columnas, tambi\u00e9n llamadas campos (fields), y filas, tambi\u00e9n llamadas registros (records). Cada tabla tiene una llave primaria (PK, primary key) que identifica de forma \u00fanica cada registro. Las tablas est\u00e1n relacionadas entre s\u00ed (de ah\u00ed el nombre relacional) con llaves for\u00e1neas (FK, foreign key) que hacen referencia a un registro de otra tabla, creando una estructura l\u00f3gica entre las tablas de una misma base de datos.</p> <p>En el siguiente diagrama entidad-relaci\u00f3n (ERD) simplificado, una tabla tiene tres columnas con datos de estudiantes, otra tabla tiene datos de los cursos y una tercera tabla que vincula cursos con estudiantes (relaci\u00f3n muchos-a-muchos, many-to-many) con llaves for\u00e1neas a las dos tablas anteriores.</p> <pre><code>erDiagram\n    ESTUDIANTE ||--o{ MATRICULA : matricula\n    ESTUDIANTE {\n        string estudiante_id PK\n        string nombre\n        int edad\n    }\n    CURSO {\n        string curso_id PK\n        string nombre\n    }\n    MATRICULA ||--o{ CURSO : matricula\n    MATRICULA {\n        string estudiante_id FK\n        string curso_id FK\n        integer ciclo\n    }</code></pre> <p>Las bases de datos relacionales m\u00e1s conocidas son tipo SQL (Structured Query Language), que utilizan un lenguaje especial para hacer consultas a la base de datos. Por ejemplo:</p> <pre><code>SELECT nombre, edad FROM estudiantes WHERE id = B00000;\n</code></pre> <p>devuelve los datos (nombre, edad) del carn\u00e9 B00000.</p> <p>En general, las bases de datos tienen transacciones del tipo: lectura, creaci\u00f3n, actualizaci\u00f3n y eliminaci\u00f3n de registros (CRUD, Create, Read, Update, Delete).</p> <p>Los sistemas de administraci\u00f3n de bases de datos (DBMS, Data Base Management System) m\u00e1s populares son PostgreSQL, SQLite3, MySQL, MariaDB, Oracle y otros.</p>"},{"location":"recopilacion/#que-haremos-en-el-proyecto","title":"\u00bfQu\u00e9 haremos en el proyecto?","text":"<p>Para este proyecto haremos una recopilaci\u00f3n de datos en tiempo casi real de fuentes externas con un Web API y lo haremos de forma peri\u00f3dica, utilizando un administrador y planificador de tareas, para almacenarlos en una base de datos relacional.</p> <p>A continuaci\u00f3n hay una ampliaci\u00f3n de estos conceptos.</p>"},{"location":"recopilacion/#datos-desde-fuentes-externas-con-api","title":"Datos desde fuentes externas con API","text":"<p>En el PyX n\u00famero 6 hay una explicaci\u00f3n m\u00e1s amplia sobre los Web API y el uso del paquete <code>requests</code> de Python.</p> <p>Hay una gran cantidad de API p\u00fablicos disponibles en Public APIs.</p>"},{"location":"recopilacion/#recoleccion-periodica-de-datos-con-un-planificador-de-tareas","title":"Recolecci\u00f3n peri\u00f3dica de datos con un planificador de tareas","text":"<p>En Python es posible utilizar el paquete Celery como administrador de tareas (task manager) y como un planificador de tareas (task scheduler) que \"calendariza\" tareas en frecuencias especificadas como \"cada 60 segundos\" o seg\u00fan otros criterios, como \"el primer lunes del mes\" o \"al anochecer\".</p> <p>Por tanto, para un flujo de procesamiento de datos en tiempo real o en tiempo casi real podemos usar Celery para recopilar datos de forma continua y peri\u00f3dica. Hay m\u00e1s detalles a continuaci\u00f3n.</p>"},{"location":"recopilacion/#administrador-de-tareas","title":"Administrador de tareas","text":"<p>Celery Worker administra la ejecuci\u00f3n de tareas de forma asincr\u00f3nica entre los \"trabajadores\" (worker) disponibles. Un \"trabajador\" puede ser simplemente un n\u00facleo de la computadora local que est\u00e1 libre para ejecutar una tarea o puede ser un servidor remoto en una configuraci\u00f3n m\u00e1s compleja, por ejemplo.</p> <p>\"Asincr\u00f3nico\" significa que las tareas no bloquean unas a otras. Por ejemplo: en un flujo \"sincr\u00f3nico\" de tareas, una tarea es ejecutada solamente hasta que la anterior haya sido terminada. En el contexto de un administrador de tareas como Celery Worker, un flujo de tareas asincr\u00f3nico permite que m\u00faltiples tareas sean ejecutadas en paralelo, sin esperar a que las tareas anteriores est\u00e9n completas. Celery Worker estar\u00e1 a cargo de \"vigilar\" la cola de ejecuci\u00f3n de las tareas y reportar sus resultados.</p>"},{"location":"recopilacion/#planificador-de-tareas","title":"Planificador de tareas","text":"<p>Con Celery Beat podemos definir los momentos en que las tareas son ejecutadas. Esto es \u00fatil para crear tareas peri\u00f3dicas, en un periodo de tiempo definido como \"cada 15 segundos\" o \"cada 12 horas\" o \"todos los d\u00edas a las 2:00 am\" o \"el segundo mi\u00e9rcoles de cada mes\", e inclusive con base en eventos solares, como \"al amanecer\" o \"al mediod\u00eda\" (que var\u00eda seg\u00fan la ubicaci\u00f3n en el planeta y la \u00e9poca del a\u00f1o).</p>"},{"location":"recopilacion/#intermediador-de-mensajes","title":"Intermediador de mensajes","text":"<p>Cuando es necesaria la comunicaci\u00f3n entre procesos en una computadora, es necesario un intermediador de mensajes (message broker) para entregar el mensaje, pues los procesos no pueden comunicarse entre s\u00ed directamente.</p> <p>Redis es un intermediador de mensajes popular que permite varios modelos de comunicaci\u00f3n, como publicaci\u00f3n/suscripci\u00f3n. </p> <p>Redis tiene integraci\u00f3n con Celery, y es necesario para el env\u00edo de la asignaci\u00f3n de las tareas peri\u00f3dicas.</p>"},{"location":"recopilacion/#bases-de-datos-e-interfaces-orm","title":"Bases de datos e interfaces ORM","text":"<p>El uso de bases de datos es un \u00e1rea compleja y especializada, sin embargo, hay herramientas en Python que facilitan su gesti\u00f3n.</p> <p>En particular, la recomendaci\u00f3n es utilizar un mapeador relacional de objetos (ORM, Object-Relational Mapping), que representa las tablas y sus datos como una clase en un lenguaje de programaci\u00f3n, habilitando la interacci\u00f3n con la base de datos con el paradigma orientado a objetos, y abstrayendo la especificidad de distintas bases de datos utilizadas.</p> <p>En Python existe SQLAlchemy, un poderoso paquete para interactuar con los DBMS m\u00e1s populares.</p> <p>El ejemplo de la tabla de datos de estudiantes, cursos y matr\u00edcula mostrados anteriormente, puede ser implementado de la siguiente forma.</p> <pre><code>from sqlalchemy import create_engine, Column, ForeignKey, Integer, String\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\n# Crear la clase base de cada tabla\nBase = declarative_base()\n\n\n# Definir los modelos\nclass Estudiante(Base):\n    __tablename__ = \"estudiantes\"\n\n    estudiante_id = Column(String, primary_key=True)\n    nombre = Column(String)\n    edad = Column(Integer)\n\n\nclass Curso(Base):\n    __tablename__: = \"cursos\"\n\n    curso_id = Column(String, primary_key=True)\n    nombre = Column(String)\n\n\nclass Matricula(Base):\n    __tablename__ = \"matriculas\"\n\n    estudiante_id = Column(String, ForeignKey(\"estudiantes.estudiante_id\"), primary_key=True)\n    curso_id = Column(String, ForeignKey(\"cursos.curso_id\"), primary_key=True)\n    ciclo = Column(Integer, primary_key=True)\n\n    # Define the relationship to Estudiante and Curso\n    estudiante = relationship(\"Estudiante\")\n    curso = relationship(\"Curso\")\n</code></pre> <p>Aqu\u00ed fueron creadas las tres tablas, donde <code>matriculas</code> hace referencia por medio de llaves for\u00e1neas a las llaves primarias <code>estudiantes.estudiante_id</code> y <code>cursos.curso_id</code>. En esta misma tabla n\u00f3tese tambi\u00e9n que las tres columnas tienen <code>primary_key=True</code>, lo que indica una llave primaria compuesta, para lo cual cada registro debe tener una combinaci\u00f3n \u00fanica de estudiante, curso y ciclo lectivo.</p> <p>Finalmente, hay que crear las tablas estableciendo un <code>engine</code> o referencia a la base de datos a utilizar (en este caso SQLite3) y crear una sesi\u00f3n ligada a ese <code>engine</code>, para poder ejectuar las transacciones deseadas.</p> <pre><code># Crear la conexi\u00f3n a la base de datos SQLite3\nengine = create_engine(f\"sqlite:///{name}\")\nSession = sessionmaker(bind=engine)\nsession = Session()\n\n# Crear la(s) tabla(s) en la base de datos\nBase.metadata.create_all(engine)\n</code></pre> <p>En este proyecto no est\u00e1 determinado un mecanismo fundamental de migraciones, que son necesarias para el caso, completamente usual, en el que hay que realizar una actualizaci\u00f3n en la base de datos cuando hay cambios en los modelos (clases), conservando al mismo tiempo los datos ya almacenados. Por ejemplo, para cambiar el tipo de dato de <code>estudiante_id</code> de <code>String</code> a <code>Integer</code> hay que hacer una migraci\u00f3n. Alembic es la forma de hacerlo con SQLAlchemy, pero no est\u00e1 dentro de los alcances del proyecto.</p> <p>Para el proyecto la recomendaci\u00f3n es utilizar SQLite o PostgreSQL. Una diferencia b\u00e1sica entre ambos es que SQLite3 existe como un archivo binario (por ejemplo, <code>db.sqlite3</code> o <code>data.db</code>) mientras que PostgreSQL es un programa propiamente, instalado en la computadora o servidor. Para proyectos de gran escala PostgreSQL es recomendado, sin embargo SQLite3 tiene capacidad para manejar cientos de millones de datos, as\u00ed que en nuestro proyecto no es un problema. Quiz\u00e1 hay que tener m\u00e1s cuidado de no borrar el archivo \"de un dedazo\".</p>"}]}